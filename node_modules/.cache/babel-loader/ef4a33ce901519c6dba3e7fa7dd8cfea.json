{"ast":null,"code":"var _jsxFileName = \"/home/henrique/Documentos/henrique/Projects/Projetos/sd-013-b-project-trybewallet/src/pages/Login.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport '../style/Login.css';\nimport { login } from '../actions/index';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClick() {\n    const {\n      email\n    } = this.state;\n    const {\n      userEmail\n    } = this.props;\n    userEmail(email);\n  }\n\n  render() {\n    const {\n      email,\n      password\n    } = this.state;\n    let validation = true;\n    const MIN_PASSWORD_LENGTH = 6; // Regex para validação de email adaptada do seguinte link: https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n\n    const EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/g;\n    const emailValidation = EMAIL_REGEX.test(email); // console.log(emailValidation);\n\n    if (emailValidation && password.length >= MIN_PASSWORD_LENGTH) {\n      // console.log(validation);\n      validation = false;\n    }\n\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      \"data-testid\": \"email-input\",\n      placeholder: \"Insira o email\",\n      id: \"email\",\n      name: \"email\",\n      autoComplete: \"off\",\n      value: email,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      \"data-testid\": \"password-input\",\n      placeholder: \"Insira a senha\",\n      id: \"password\",\n      name: \"password\",\n      value: password,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: \"/carteira\",\n      id: \"link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      disabled: validation,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, \"Sing in\")));\n  }\n\n}\n\nLogin.propTypes = {\n  userEmail: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userEmail: email => dispatch(login(email))\n});\n\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/henrique/Documentos/henrique/Projects/Projetos/sd-013-b-project-trybewallet/src/pages/Login.js"],"names":["React","connect","Link","PropTypes","login","Login","Component","constructor","state","email","password","handleChange","bind","handleClick","target","name","value","setState","userEmail","props","render","validation","MIN_PASSWORD_LENGTH","EMAIL_REGEX","emailValidation","test","length","propTypes","func","isRequired","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport '../style/Login.css';\n\nimport { login } from '../actions/index';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { email } = this.state;\n    const { userEmail } = this.props;\n    userEmail(email);\n  }\n\n  render() {\n    const { email, password } = this.state;\n    let validation = true;\n    const MIN_PASSWORD_LENGTH = 6;\n\n    // Regex para validação de email adaptada do seguinte link: https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n    const EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/g;\n\n    const emailValidation = EMAIL_REGEX.test(email);\n    // console.log(emailValidation);\n    if (emailValidation && password.length >= MIN_PASSWORD_LENGTH) {\n      // console.log(validation);\n      validation = false;\n    }\n\n    return (\n      <form className=\"box\">\n        <h1>Login</h1>\n        <input\n          type=\"email\"\n          data-testid=\"email-input\"\n          placeholder=\"Insira o email\"\n          id=\"email\"\n          name=\"email\"\n          autoComplete=\"off\"\n          value={ email }\n          onChange={ this.handleChange }\n        />\n        <input\n          type=\"password\"\n          data-testid=\"password-input\"\n          placeholder=\"Insira a senha\"\n          id=\"password\"\n          name=\"password\"\n          value={ password }\n          onChange={ this.handleChange }\n        />\n        <Link to=\"/carteira\" id=\"link\">\n          <button\n            type=\"button\"\n            disabled={ validation }\n            onClick={ this.handleClick }\n          >\n            Sing in\n          </button>\n        </Link>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  userEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  userEmail: (email) => dispatch(login(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}